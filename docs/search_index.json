[["index.html", "Customizing ggplot2 plots in R for scientific research", " Customizing ggplot2 plots in R for scientific research Bin Chi 25/11/2020 "],["introduction.html", "1 Introduction", " 1 Introduction This is the second CASA0005 GI Systems and Science seminar. It aims to advance your data visualization skills in R using the ggplot2 package. By the end of the seminar you will have: div.blue { background-color:#e6f0ff; border-radius: 5px; padding: 20px;} Advanced your knowledge of ggplot2 in R Learnt some advanced customization in ggplot Created a high resolution graph for your research Learnt to trouble-shoot by yourself "],["recommended-resources.html", "2 Recommended resources 2.1 Resouces for the ggplot2 package 2.2 Resouces for graphs or data visualization in academic research 2.3 How to find more useful resources", " 2 Recommended resources Data visualisation is the visual representation of patterns in data. An efficient data visualisation makes data more understandable. 2.1 Resouces for the ggplot2 package Data Visualization with ggplot2 Cheat Sheet - RStudio ggplot2: Elegant Graphics for Data Analysis Data Visualization in R with ggplot2 Top 50 ggplot2 Visualizations - The Master List (With Full R Code) 2.2 Resouces for graphs or data visualization in academic research Ten guidelines for effective data visualization in scientific publications Beyond Bar and Line Graphs: Time for a New Data Presentation Paradigm How to Write a Paper R Graphics Cookbook, 2nd edition Data visualization beginners guide: a definition, examples, and learning resources 2.3 How to find more useful resources GOOGLE "],["recap.html", "3 Recap", " 3 Recap Graphs need to be clear, precise and efficient, below listed some requirements of graphs: div.blue { background-color:#e6f0ff; border-radius: 5px; padding: 20px;} Have a title or figure caption Label axes Axis labels with units Have a legend Legible font size Good resolution Tip: When you are ready to create your figures,it worthwhile to understand the manuscript requirement first.Now let use have a look at the CASA0005 assessment mark scheme. Meanwhile,different journals or publishers have different requirements for figures. SAGE Publishing manuscript Submission Guidelines Nature submission guidelines Wiley manuscript preparation guidelines Graphic in academic research is generally expected to be clear, concise and easy to read. Now lets have a look at some examples in GIS course assignment last year. Example 1 Example 2 Example 3 "],["getting-started.html", "4 Getting started 4.1 Installing ggplot2 package 4.2 Loading ggplot2 package 4.3 Dataset", " 4 Getting started 4.1 Installing ggplot2 package If you have installed ggplot2 package already, you can jump to the next step. #install.packages(&quot;ggplot2&quot;) #install.packages(&quot;ggpubr&quot;) 4.2 Loading ggplot2 package Load the packages for todays seminar. #load the package for this seminar library(ggplot2) library(ggpubr) Note: Once you have loaded the package successfully, there will be a check mark display before the package under your Packages tab at the bottom right pane. 4.3 Dataset Lets start by loading two datasets. The first dataset records 924 transactions in 2009 for two local authorities in England. The second dataset records the median house price per square meter for each region in England between 2009 and 2016. These two datasets are derived from a linked house price in England (CASA working paper213). # read in the first dataset housedata1&lt;-read.csv(&quot;data1.csv&quot;) # read in the second dataset housedata2 &lt;- read.csv(&quot;data2.csv&quot;) The first house price dataset contains seven fields. They separately refer to transaction price, transaction date, transaction year, propertys total floor area, the Census 2011 local authority district code, the Census 2011 local authority district name and region name. The second house price dataset contains four fields.They separately refer to the Census 2011 region code, transaction year, house price per square meter and region name. "],["graphics-with-ggplot2.html", "5 Graphics with ggplot2 5.1 Basic components of a ggplot2 Plot 5.2 Building a simple ggplot plot 5.3 Customizing the graph 5.4 Saving graphs 5.5 Extensions", " 5 Graphics with ggplot2 5.1 Basic components of a ggplot2 Plot There are two ways to produce plots in ggplot2, one is qplot() and the other is ggplot(). In this seminar we focus on ggplot. Data Visualization with ggplot2 Cheat Sheet - RStudio ggplot2 is based on the grammar of graphics, the idea that you can build every graph from the same few components: a data set, a set of geomsvisual marks that represent data points, and a coordinate system. 5.2 Building a simple ggplot plot Now let us start by creating a scatter plot using ggplot().The scatter plot is created to explore the relationship between transaction price and total floor area in two different local authorities. 5.2.1 Make sure your datasets are data frames Since ggplot only works with data frames, we use is.data.frame()to check the whether the data is a data frame. If it is not, you need to convert it to a data frame. #test the data set is a data frame #is.data.frame(housedata1) #is.data.frame(housedata2) 5.2.2 Plot background and set the x and y axis ggplot(housedata1,aes(x=tfarea,y=price)) 5.2.3 Add a layer ggplot(housedata1,aes(x=tfarea,y=price))+ geom_point() 5.2.4 Color the point In ggplot, additional aesthetic values can be added in based on other properties from our dataset. Given that housedata1 records transaction price in two local authorities, we can color the points differently depending on the ldnm field. ggplot(housedata1,aes(x=tfarea,y=price))+ geom_point(aes(color=ldnm)) 5.2.5 Add a linear regression line To add a linear regression line to a scatter plot, we can do this by adding stat_smooth(),method = lm where lm means linear model i.e. use linear regression ggplot(housedata1,aes(x=tfarea,y=price,group=ldnm))+ geom_point(aes(color=ldnm))+ geom_smooth(method=&quot;lm&quot;) ## `geom_smooth()` using formula &#39;y ~ x&#39; 5.2.6 Split a single plot into many related plots You can split the scatter plot for each local authority with facet_wrap(). ggplot(housedata1,aes(x=tfarea,y=price,group=ldnm))+ geom_point(aes(color=ldnm))+ geom_smooth(method=&quot;lm&quot;)+ facet_wrap(~ ldnm) ## `geom_smooth()` using formula &#39;y ~ x&#39; 5.3 Customizing the graph 5.3.1 Change the point colour The colour of the points can be control with the color aesthetic. Below is the code to colour all the points in blue. ggplot(housedata1,aes(x=tfarea,y=price,group=ldnm))+ geom_point(color=&quot;#56b4e9&quot;)+ geom_smooth(method=&quot;lm&quot;)+ facet_wrap(~ ldnm) ## `geom_smooth()` using formula &#39;y ~ x&#39; 5.3.2 Change the point size The size of the points can be controlled with the size aesthetic. The default value of size is 2. The size can be set to 1.2 by the following code. ggplot(housedata1,aes(x=tfarea,y=price,group=ldnm))+ geom_point(color=&quot;#56b4e9&quot;,size = 1.2)+ geom_smooth(method=&quot;lm&quot;)+ facet_wrap(~ ldnm) ## `geom_smooth()` using formula &#39;y ~ x&#39; 5.3.3 Change the point shape The size of the points can be controlled with the shape aesthetic. The default shape is solid circles and you can change with Point Shape Options in ggplot. The following code shows you how to plot the points as solid squares. ggplot(housedata1,aes(x=tfarea,y=price,group=ldnm))+ geom_point(color=&quot;#56b4e9&quot;,size = 1.2, shape=15)+ geom_smooth(method=&quot;lm&quot;)+ facet_wrap(~ ldnm) ## `geom_smooth()` using formula &#39;y ~ x&#39; 5.3.4 Modify fitted regression lines The default color of the fit line is blue. This can be change by setting colour,The following code sets a red fit line. #method 1 ggplot(housedata1,aes(x=tfarea,y=price,group=ldnm))+ geom_point(color=&quot;#56b4e9&quot;,size = 1.2)+ geom_smooth(method=&quot;lm&quot;,colour = &quot;red&quot;)+ facet_wrap(~ ldnm) ## `geom_smooth()` using formula &#39;y ~ x&#39; # method 2 ggplot(housedata1,aes(x=tfarea,y=price,group=ldnm))+ geom_point(color=&quot;#56b4e9&quot;,size = 1.2)+ geom_smooth(method=&quot;lm&quot;,colour = &quot;#FF0000&quot;)+ facet_wrap(~ ldnm) ## `geom_smooth()` using formula &#39;y ~ x&#39; The grey area near the fit line is the confidence region.you can disabled it with se = FALSE. ggplot(housedata1,aes(x=tfarea,y=price,group=ldnm))+ geom_point(color=&quot;#56b4e9&quot;,size = 1.2)+ geom_smooth(method=&quot;lm&quot;,se = FALSE)+ facet_wrap(~ ldnm) ## `geom_smooth()` using formula &#39;y ~ x&#39; 5.3.5 Change the axis titles The labs function can be used to change axis labels.Here are two ways to change the axis title. #Method 1 ggplot(housedata1,aes(x=tfarea,y=price,group=ldnm))+ geom_point(color=&quot;#56b4e9&quot;,size = 1.2)+ facet_wrap(~ ldnm)+ labs(x = &quot;Total floor area&quot;, y = &quot;Transaction price&quot;) #Method 2 ggplot(housedata1,aes(x=tfarea,y=price,group=ldnm))+ geom_point(color=&quot;#56b4e9&quot;,size = 1.2, shape=15)+ facet_wrap(~ ldnm)+ xlab(&quot;Total floor area&quot;)+ ylab(&quot;Transaction price&quot;) 5.3.6 Add axis labels and units 5.3.6.1 Formatting y axis and labels Below is the code for adding in the y axis units in ggplot(). ggplot(housedata1,aes(x=tfarea,y=price,group=ldnm))+ geom_point(color=&quot;#56b4e9&quot;,size = 1.2)+ facet_wrap(~ ldnm)+ xlab(&quot;Total floor area&quot;)+ ylab(&quot;Transaction price (£)&quot;) If you want to change the units of the y axis to thousands of pounds, you can use scale_y_continuous. ggplot(housedata1,aes(x=tfarea,y=price,group=ldnm))+ geom_point(color=&quot;#56b4e9&quot;,size = 1.2)+ facet_wrap(~ ldnm)+ scale_y_continuous(name = &quot;Transaction Price (in £1000s)&quot;,labels = function(y) y / 1000)+ xlab(&quot;Total floor area&quot;) You can also format the y labels more readably, with some common formats from the scales package.Below is the code for formatting y labels in comma. ggplot(housedata1,aes(x=tfarea,y=price/1000,group=ldnm))+ geom_point(color=&quot;#56b4e9&quot;,size = 1.2)+ facet_wrap(~ ldnm)+ scale_y_continuous(name = &quot;Transaction Price (in £1000s)&quot;,labels = scales::comma)+ xlab(&quot;Total floor area&quot;) to convert the y axis to a percentage scale ,you can use `scale_y_continuous(labels = scales::percent) to display dollars on the y axis, you can use `scale_y_continuous(labels = scales::dollar) to display euros on the y axis, you can use `scale_y_continuous(labels = scales::dollar_format(suffix = , prefix = \"\")) 5.3.6.2 Add x axis unit Below are listed two approaches to labelling the x axis using math notation. Math Notation for R Plot Titles: expression, bquote, &amp; Greek Letters offers more bquoteapplications in R. #method 1 ggplot(housedata1,aes(x=tfarea,y=price/1000,group=ldnm))+ geom_point(color=&quot;#56b4e9&quot;,size = 1.2)+ facet_wrap(~ ldnm)+ scale_y_continuous(name = &quot;Transaction Price (in £1000s)&quot;,labels = scales::comma)+ xlab(bquote(&quot;Total floor area (&quot; ~ m^2 ~ &quot;)&quot;)) #method 2 ggplot(housedata1,aes(x=tfarea,y=price/1000,group=ldnm))+ geom_point(color=&quot;#56b4e9&quot;,size = 1.2)+ facet_wrap(~ ldnm)+ scale_y_continuous(name = &quot;Transaction Price (in £1000s)&quot;,labels = scales::comma)+ xlab(expression(&quot;Total floor area (&quot; ~ m^2 ~ &quot;)&quot;)) 5.3.6.3 Change x-axis breaks You can use the breaks function to change the x or y axis breaks. ggplot(housedata1,aes(x=tfarea,y=price/1000,group=ldnm))+ geom_point(color=&quot;#56b4e9&quot;,size = 1.2)+ geom_smooth(method=&quot;lm&quot;,se = FALSE)+ facet_wrap(~ ldnm)+ scale_y_continuous(name = &quot;Transaction Price (in £1000s)&quot;,labels = scales::comma)+ xlab(bquote(&quot;Total floor area (&quot; ~ m^2 ~ &quot;)&quot;))+ scale_x_continuous(breaks = c(50,100,150,200,250,300)) ## `geom_smooth()` using formula &#39;y ~ x&#39; ##using seq if the breaks interval are equal ggplot(housedata1,aes(x=tfarea,y=price/1000,group=ldnm))+ geom_point(color=&quot;#56b4e9&quot;,size = 1.2)+ facet_wrap(~ ldnm)+ scale_y_continuous(name = &quot;Transaction Price (in £1000s)&quot;,labels = scales::comma)+ xlab(bquote(&quot;Total floor area (&quot; ~ m^2 ~ &quot;)&quot;))+ scale_x_continuous(breaks = seq(50,300,50)) 5.3.6.4 Specify axis plot range You can use limits to modify the axis limits.Below is an example to limit the x axis. It plots the total floor area below 300 . ggplot(housedata1,aes(x=tfarea,y=price/1000,group=ldnm))+ geom_point(color=&quot;#56b4e9&quot;,size = 1.2)+ facet_wrap(~ ldnm)+ scale_y_continuous(name = &quot;Transaction Price (in £1000s)&quot;,labels = scales::comma)+ xlab(bquote(&quot;Total floor area (&quot; ~ m^2 ~ &quot;)&quot;))+ scale_x_continuous(breaks = seq(50,300,50),limits = c(0, 300)) ## Warning: Removed 2 rows containing missing values (geom_point). You can follow the same step for your y axis. ggplot(housedata1,aes(x=tfarea,y=price/1000,group=ldnm))+ geom_point(color=&quot;#56b4e9&quot;,size = 1.2)+ facet_wrap(~ ldnm)+ scale_y_continuous(name = &quot;Transaction Price (in £1000s)&quot;,labels = scales::comma)+ xlab(bquote(&quot;Total floor area (&quot; ~ m^2 ~ &quot;)&quot;))+ scale_x_continuous(breaks = seq(50,300,50),limits = c(0, 300))+ scale_y_continuous(limits = c(0, 1200)) ## Scale for &#39;y&#39; is already present. Adding another scale for &#39;y&#39;, which will replace the existing scale. 5.3.7 Add in title You can use ggtitle() to add a title in the plot. Below is the code. ggplot(housedata1,aes(x=tfarea,y=price/1000,group=ldnm))+ geom_point(color=&quot;#56b4e9&quot;,size = 1.2)+ facet_wrap(~ ldnm)+ scale_y_continuous(name = &quot;Transaction Price (in £1000s)&quot;,labels = scales::comma)+ xlab(expression(&quot;Total floor area (&quot; ~ m^2 ~ &quot;)&quot;))+ ggtitle(&quot;Transaction price against total floor area in local authorities, 2009&quot;) 5.3.8 Change themes There are eight themes that can be directly used to give the plot a customized look.theme_grey() is the default ggplot2 theme, you can use theme_bw() to remove it. ggplot(housedata1,aes(x=tfarea,y=price/1000,group=ldnm))+ geom_point(color=&quot;#56b4e9&quot;,size = 1.2)+ facet_wrap(~ ldnm)+ scale_y_continuous(name = &quot;Transaction Price (in £1000s)&quot;,labels = scales::comma)+ xlab(expression(&quot;Total floor area (&quot; ~ m^2 ~ &quot;)&quot;))+ theme_bw() Below are listed the rest of six other themes, from which you can choose your favourite for your academic writing. ggplot(housedata1,aes(x=tfarea,y=price/1000,group=ldnm))+ geom_point(color=&quot;#56b4e9&quot;,size = 1.2)+ facet_wrap(~ ldnm)+ scale_y_continuous(name = &quot;Transaction Price (in £1000s)&quot;,labels = scales::comma)+ xlab(expression(&quot;Total floor area (&quot; ~ m^2 ~ &quot;)&quot;))+ theme_linedraw() ggplot(housedata1,aes(x=tfarea,y=price/1000,group=ldnm))+ geom_point(color=&quot;#56b4e9&quot;,size = 1.2)+ facet_wrap(~ ldnm)+ scale_y_continuous(name = &quot;Transaction Price (in £1000s)&quot;,labels = scales::comma)+ xlab(expression(&quot;Total floor area (&quot; ~ m^2 ~ &quot;)&quot;))+ theme_light() ggplot(housedata1,aes(x=tfarea,y=price/1000,group=ldnm))+ geom_point(color=&quot;#56b4e9&quot;,size = 1.2)+ facet_wrap(~ ldnm)+ scale_y_continuous(name = &quot;Transaction Price (in £1000s)&quot;,labels = scales::comma)+ xlab(expression(&quot;Total floor area (&quot; ~ m^2 ~ &quot;)&quot;))+ theme_dark() ggplot(housedata1,aes(x=tfarea,y=price/1000,group=ldnm))+ geom_point(color=&quot;#56b4e9&quot;,size = 1.2)+ facet_wrap(~ ldnm)+ scale_y_continuous(name = &quot;Transaction Price (in £1000s)&quot;,labels = scales::comma)+ xlab(expression(&quot;Total floor area (&quot; ~ m^2 ~ &quot;)&quot;))+ theme_minimal() ggplot(housedata1,aes(x=tfarea,y=price/1000,group=ldnm))+ geom_point(color=&quot;#56b4e9&quot;,size = 1.2)+ facet_wrap(~ ldnm)+ scale_y_continuous(name = &quot;Transaction Price (in £1000s)&quot;,labels = scales::comma)+ xlab(expression(&quot;Total floor area (&quot; ~ m^2 ~ &quot;)&quot;))+ theme_classic() ggplot(housedata1,aes(x=tfarea,y=price/1000,group=ldnm))+ geom_point(color=&quot;#56b4e9&quot;,size = 1.2)+ facet_wrap(~ ldnm)+ scale_y_continuous(name = &quot;Transaction Price (in £1000s)&quot;,labels = scales::comma)+ xlab(expression(&quot;Total floor area (&quot; ~ m^2 ~ &quot;)&quot;))+ theme_void() The R package ggthemes provides another gallery of custom ggplot themes.You can see detials in package:ggthemes  All Your Figure Are Belong To Us. 5.3.9 Change the font size You can manually customize the ggplot by modifying the components in theme(). Below I give a series of examples on how to change the font size in the plot. Let us do it step-by-step. 5.3.9.1 Change the font size of text in x and y axis and colour it red ggplot(housedata1,aes(x=tfarea,y=price/1000,group=ldnm))+ geom_point(color=&quot;#56b4e9&quot;,size = 1.2)+ facet_wrap(~ ldnm)+ scale_y_continuous(name = &quot;Transaction Price (in £1000s)&quot;,labels = scales::comma)+ xlab(expression(&quot;Total floor area (&quot; ~ m^2 ~ &quot;)&quot;))+ theme_bw()+ theme(axis.title = element_text(size=15,color=&quot;red&quot;)) 5.3.9.2 Change the font size of x and y labels in the plot and colour them red ggplot(housedata1,aes(x=tfarea,y=price/1000,group=ldnm))+ geom_point(color=&quot;#56b4e9&quot;,size = 1.2)+ facet_wrap(~ ldnm)+ scale_y_continuous(name = &quot;Transaction Price (in £1000s)&quot;,labels = scales::comma)+ xlab(expression(&quot;Total floor area (&quot; ~ m^2 ~ &quot;)&quot;))+ theme_bw()+ theme(axis.title = element_text(size=15),axis.text = element_text(size=13,color=&quot;red&quot;)) 5.3.9.3 Change the font size of facet labels in the plot and colour them red ggplot(housedata1,aes(x=tfarea,y=price/1000,group=ldnm))+ geom_point(color=&quot;#56b4e9&quot;,size = 1.2)+ facet_wrap(~ ldnm)+ scale_y_continuous(name = &quot;Transaction Price (in £1000s)&quot;,labels = scales::comma)+ xlab(expression(&quot;Total floor area (&quot; ~ m^2 ~ &quot;)&quot;))+ theme_bw()+ theme(axis.title = element_text(size=15),axis.text = element_text(size=13),strip.text = element_text(size=15,color=&quot;red&quot;)) 5.3.9.4 Change the font size of legend item labels in the plot and colour them red ggplot(housedata1,aes(x=tfarea,y=price/1000,group=ldnm))+ geom_point(aes(color=ldnm),size = 1.2)+ facet_wrap(~ ldnm)+ scale_y_continuous(name = &quot;Transaction Price (in £1000s)&quot;,labels = scales::comma)+ xlab(expression(&quot;Total floor area (&quot; ~ m^2 ~ &quot;)&quot;))+ theme_bw()+ theme(axis.title = element_text(size=15),axis.text = element_text(size=13),strip.text = element_text(size=15),legend.text = element_text(size=13,color=&quot;red&quot;)) 5.3.9.5 Change the font size of title of the legend in the plot and colour it red ggplot(housedata1,aes(x=tfarea,y=price/1000,group=ldnm))+ geom_point(aes(color=ldnm),size = 1.2)+ facet_wrap(~ ldnm)+ scale_y_continuous(name = &quot;Transaction Price (in £1000s)&quot;,labels = scales::comma)+ xlab(expression(&quot;Total floor area (&quot; ~ m^2 ~ &quot;)&quot;))+ theme_bw()+ theme(axis.title = element_text(size=15),axis.text = element_text(size=13),strip.text = element_text(size=15),legend.text = element_text(size=13),legend.title = element_text(size=15,color=&quot;red&quot;)) You may wonder about how to change the legend text in the above plot. Below is the answer: ggplot(housedata1,aes(x=tfarea,y=price/1000,group=ldnm))+ geom_point(aes(color=ldnm),size = 1.2)+ facet_wrap(~ ldnm)+ scale_y_continuous(name = &quot;Transaction Price (in £1000s)&quot;,labels = scales::comma)+ xlab(expression(&quot;Total floor area (&quot; ~ m^2 ~ &quot;)&quot;))+ theme_bw()+ theme(axis.title = element_text(size=15),axis.text = element_text(size=13),strip.text = element_text(size=15),legend.text = element_text(size=13),legend.title = element_text(size=15,color=&quot;red&quot;))+ labs(color = &quot;Local authority&quot;) 5.3.10 Add in the Pearson correlation coefficient result in the plot Since the aim of this scatter plot is to explore the relationship between transaction price and propertys total floor area. The Pearson correlation coefficient is a suitable measure to show in the plot.Here we use stat_cor() from the package ggpubr. # add Pearson correlation coefficient and p value in the graph ggplot(housedata1,aes(x=tfarea,y=price/1000))+ geom_point(color=&quot;#56b4e9&quot;,size = 1.2)+ facet_wrap(~ ldnm)+ scale_y_continuous(name = &quot;Transaction Price (in £1000s)&quot;,labels = scales::comma)+ xlab(expression(&quot;Total floor area (&quot; ~ m^2 ~ &quot;)&quot;))+ theme_bw()+ theme(axis.title = element_text(size=15),axis.text = element_text(size=13),strip.text = element_text(size=15))+ stat_cor(method=&quot;pearson&quot;) You may wonder how to change R to rho. Here is one solution I found (Modify stat_cor function to output rho instead of R). # type this first and modify output.type part trace(ggpubr:::.cor_test, edit=TRUE) ## Tracing function &quot;.cor_test&quot; in package &quot;ggpubr (not-exported)&quot; ## [1] &quot;.cor_test&quot; #plot ggplot(housedata1,aes(x=tfarea,y=price/1000))+ geom_point(color=&quot;#56b4e9&quot;,size = 1.2)+ facet_wrap(~ ldnm)+ scale_y_continuous(name = &quot;Transaction Price (in £1000s)&quot;,labels = scales::comma)+ xlab(expression(&quot;Total floor area (&quot; ~ m^2 ~ &quot;)&quot;))+ theme_bw()+ theme(axis.title = element_text(size=15),axis.text = element_text(size=13),strip.text = element_text(size=15))+ stat_cor(method=&quot;pearson&quot;) Tip: Once you type trace(ggpubr:::.cor_test, edit=TRUE) in R studio, you will get an edit window as shown above. You need only change the red square part from left to right. You also can change the label text location as shown below: ggplot(housedata1,aes(x=tfarea,y=price/1000))+ geom_point(color=&quot;#56b4e9&quot;,size = 1.2)+ facet_wrap(~ ldnm)+ scale_y_continuous(name = &quot;Transaction Price (in £1000s)&quot;,labels = scales::comma)+ xlab(expression(&quot;Total floor area (&quot; ~ m^2 ~ &quot;)&quot;))+ theme_bw()+ theme(axis.title = element_text(size=15),axis.text = element_text(size=13),strip.text = element_text(size=15))+ stat_cor(method=&quot;pearson&quot;,label.x = 150, label.y = 2000,size=5) 5.4 Saving graphs Plots exported directly from RStudio will only achieve a resolution of 72dpi. Higher DPI (Dots per Inch) means higher resolution. ggsave is used to save a high resolution graph from the screen to a file. #get you working directory getwd() ## [1] &quot;D:/R/CASA_seminar2&quot; #save the figure as tiff ggsave(&quot;Figure_A.tiff&quot;,units=&quot;in&quot;, width=12, height=6, dpi=500) #ggsave(&quot;first.png&quot;,units=&quot;in&quot;, width=10, height=5, dpi=300) #ggsave(&quot;example.png&quot;, units = &quot;cm&quot;,width = 30, height = 20 ) 5.5 Extensions 12 Extensions to ggplot2 for More Powerful R Visualizations "],["challenges.html", "6 Challenges 6.1 Challenge 1: reorder the items in legend 6.2 Challenge 2: Manualy setting the colour of the line and point", " 6 Challenges Let us move to the challenge part of the seminar to examine your understanding. Below are two graphs created by ggplot() based on housedata2. 6.1 Challenge 1: reorder the items in legend ggplot(data=housedata2, aes(x= yearchi, y=priceper,group=region,color=region)) +geom_point(size=2)+ geom_line(size = 1)+ theme_bw()+ theme(axis.title = element_text(size=15), axis.text = element_text(size=13),strip.text = element_text(size=15),legend.text = element_text(size=11),legend.title = element_text(size=13))+ ylab(bquote(&quot;House price ( £/&quot;~m^2 ~ &quot;)&quot;))+xlab(&quot;Year&quot;)+ guides(color=guide_legend(&quot;Region&quot;)) + scale_y_continuous(labels = scales::comma,)+scale_x_continuous(breaks = c(2009,2010,2011,2012,2013,2014,2015,2016)) 6.2 Challenge 2: Manualy setting the colour of the line and point # calculate the rank order of house price in each region at each transaction year. result1 &lt;- data.frame() ms &lt;- 0 autodata &lt;-0 j &lt;- 1 list &lt;-unique(housedata2$yearchi) for(ms in list) { print(ms) print(j) autodata &lt;- housedata2[housedata2$yearchi==ms,] autodata$ranknew &lt;- rank(-autodata$priceper) autodata$ranknew1 &lt;- rank(autodata$priceper) result1 &lt;- rbind(result1,autodata) j &lt;- j+1 } ## [1] 2009 ## [1] 1 ## [1] 2012 ## [1] 2 ## [1] 2015 ## [1] 3 ## [1] 2016 ## [1] 4 ## [1] 2011 ## [1] 5 ## [1] 2014 ## [1] 6 ## [1] 2010 ## [1] 7 ## [1] 2013 ## [1] 8 head(result1) ## gor yearchi priceper region ranknew ranknew1 ## 1 E12000001 2009 1425.943 North East 9 1 ## 13 E12000002 2009 1554.641 North West 7 3 ## 24 E12000003 2009 1585.518 Yorkshire and The Humber 6 4 ## 32 E12000004 2009 1528.438 East Midlands 8 2 ## 35 E12000005 2009 1686.191 West Midlands 5 5 ## 44 E12000006 2009 2104.026 East of England 3 7 # Plot house price rank order change between 2009 and 2016 ggplot(data=result1,aes(x=yearchi, y=ranknew,group=region,color=region))+ geom_line(aes(color = region, alpha = 1), size = 0.7) + geom_point(data = result1[(result1$yearchi == &quot;2009&quot;|result1$yearchi == &quot;2016&quot;),], aes(x=yearchi, y=ranknew,group=region,color = region), size = 8)+ geom_text(data = result1[result1$yearchi == &quot;2016&quot;,], aes(label = region) , position = position_nudge(x = 0.4), hjust = 0, size = 5) + geom_label(data = result1[(result1$yearchi == &quot;2009&quot;|result1$yearchi == &quot;2016&quot;),], aes(label = ranknew), color=&quot;white&quot;, alpha = 0, size = 5, label.padding = unit(0.00, &quot;lines&quot;), label.size = 0.0)+ theme_bw()+ scale_x_continuous(limits = c(2007, 2021),breaks = c(2009,2010,2011,2012,2013,2014,2015,2016))+ scale_y_reverse( breaks = unique(result1$ranknew))+ theme(legend.position = &quot;none&quot;,axis.text = element_text(size=13))+ theme(axis.line=element_blank(), axis.text.y=element_blank(), axis.ticks=element_blank(), axis.title.x=element_blank(), axis.title.y=element_blank(), legend.position=&quot;none&quot;, panel.background=element_blank(), panel.border=element_blank(), panel.grid.major.y = element_blank(), panel.grid.minor.x=element_blank(), panel.grid.minor.y=element_blank(), plot.background=element_blank()) "],["answer.html", "7 Answer", " 7 Answer I will release the answer in 5 mins. Below is the answer to challenge 1: You also can change the legend label text by setting the labels using scale_colour_hue. Below is the answer to challenge 2: "],["q-a.html", "Q &amp; A", " Q &amp; A "]]
